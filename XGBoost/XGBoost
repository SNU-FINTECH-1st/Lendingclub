{"cells":[{"cell_type":"code","source":["# prompt: googlemount\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"id":"tBRqbU5TFxRP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724600429963,"user_tz":-540,"elapsed":22348,"user":{"displayName":"박준희","userId":"16915361753984348702"}},"outputId":"e7a14ee1-055d-499a-d448-3dbbe4f4dd05"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":4,"metadata":{"id":"Yf3G7TWbDLU2","executionInfo":{"status":"ok","timestamp":1724600433489,"user_tz":-540,"elapsed":1695,"user":{"displayName":"박준희","userId":"16915361753984348702"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.preprocessing import LabelEncoder\n","import seaborn as sns\n","import sklearn\n","import math\n","import statistics\n","import warnings\n","import os\n","\n","warnings.filterwarnings(action='ignore')\n","pd.options.display.float_format = '{:.5f}'.format\n","pd.set_option('display.max_columns',None)"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"GK6WWTXGDLU2","executionInfo":{"status":"ok","timestamp":1724600488064,"user_tz":-540,"elapsed":47272,"user":{"displayName":"박준희","userId":"16915361753984348702"}}},"outputs":[],"source":["temp_data=pd.read_csv(r\"/content/drive/MyDrive/lending_club/Cleansing_data1_out_current_order_by_date.csv\",low_memory=False,keep_default_na=True)"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"E0U3Ui0DDLU2","executionInfo":{"status":"ok","timestamp":1724600488065,"user_tz":-540,"elapsed":10,"user":{"displayName":"박준희","userId":"16915361753984348702"}}},"outputs":[],"source":["temp_data['target'] = temp_data['total_rec_prncp']/temp_data['funded_amnt']"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"T7iU92auDLU3","executionInfo":{"status":"ok","timestamp":1724600488065,"user_tz":-540,"elapsed":6,"user":{"displayName":"박준희","userId":"16915361753984348702"}}},"outputs":[],"source":["# temp_data = temp_data.dropna(subset=['target']) # 결측치행 제거"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pJ4Q6SlIDLU3","executionInfo":{"status":"ok","timestamp":1724600488065,"user_tz":-540,"elapsed":6,"user":{"displayName":"박준희","userId":"16915361753984348702"}},"outputId":"b9f2a292-be57-421f-8d90-e367646bcfe3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":8}],"source":["temp_data['target'].isna().sum()"]},{"cell_type":"code","source":["# temp_data에서 랜덤으로 10000개 행 추출\n","temp_data = temp_data.sample(n=10000, random_state=42)\n","\n","# 결과 확인\n","len(temp_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GdXV3rz_J_zD","executionInfo":{"status":"ok","timestamp":1724600490863,"user_tz":-540,"elapsed":325,"user":{"displayName":"박준희","userId":"16915361753984348702"}},"outputId":"c938b1c1-8944-4778-b55a-becfe4ece634"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["10000"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","execution_count":16,"metadata":{"id":"sNsvlyGDDLU4","executionInfo":{"status":"ok","timestamp":1724601160307,"user_tz":-540,"elapsed":337,"user":{"displayName":"박준희","userId":"16915361753984348702"}}},"outputs":[],"source":["import pandas\n","import numpy\n","import xgboost as xgb\n","import random\n","from sklearn.model_selection import train_test_split, RandomizedSearchCV\n","from sklearn.metrics import mean_squared_error\n","\n","\n","# 목표 변수 설정\n","target_column = 'target'\n","# 우선은 object 타입의 열을 제외하고 숫자 데이터만 포함하는 새로운 데이터프레임 생성\n","temp_data = temp_data.select_dtypes(include=[numpy.number])\n","\n","\n","x = temp_data.drop(target_column, axis=1).values.astype(numpy.float32)\n","y = temp_data[target_column].values.astype(numpy.float32)\n","\n"]},{"cell_type":"code","source":["x"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3r488lRwPM3Q","executionInfo":{"status":"ok","timestamp":1724601165226,"user_tz":-540,"elapsed":333,"user":{"displayName":"박준희","userId":"16915361753984348702"}},"outputId":"d48b7b42-737c-4f87-a7aa-a719f8651dc4"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 8000.,  8000.,  8000., ...,     0.,     0.,     0.],\n","       [24000., 24000., 24000., ...,     0.,     0.,     0.],\n","       [30000., 30000., 30000., ...,     0.,     0.,     0.],\n","       ...,\n","       [ 6000.,  6000.,  6000., ...,     0.,     0.,     0.],\n","       [30000., 30000., 30000., ...,     0.,     0.,     0.],\n","       [ 6000.,  6000.,  6000., ...,     0.,     0.,     0.]],\n","      dtype=float32)"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["\n","# 3. 데이터셋을 학습, 검증, 테스트로 나누기\n","x_train, x_temp, y_train, y_temp = train_test_split(x, y, test_size=0.30, random_state=101)\n","x_val, x_test, y_val, y_test = train_test_split(x_temp, y_temp, test_size=0.50, random_state=101)\n","\n","# 4. xGBoost 모델 설정 및 Randomized Search\n","params = {\n","    'objective': ['reg:squarederror'],  # 회귀를 위한 설정\n","    'max_depth': [3, 6, 9],\n","    'learning_rate': [0.01, 0.1, 0.2],\n","    'n_estimators': [100, 500, 1000],\n","    'tree_method': ['gpu_hist'],  # GPU 기반의 hist 사용\n","    'random_state': [101]\n","}\n","\n","xgb_model = xgb.XGBRegressor()\n","random_search = RandomizedSearchCV(xgb_model, param_distributions=params, n_iter=50, cv=3, verbose=1, random_state=101, n_jobs=-1)\n","random_search.fit(x_train, y_train)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":136},"id":"L9kXn8KbPEJI","executionInfo":{"status":"ok","timestamp":1724601449117,"user_tz":-540,"elapsed":105279,"user":{"displayName":"박준희","userId":"16915361753984348702"}},"outputId":"0bd96329-eb4c-4f15-de2e-d0fb443a6349"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 27 candidates, totalling 81 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=3,\n","                   estimator=XGBRegressor(base_score=None, booster=None,\n","                                          callbacks=None,\n","                                          colsample_bylevel=None,\n","                                          colsample_bynode=None,\n","                                          colsample_bytree=None, device=None,\n","                                          early_stopping_rounds=None,\n","                                          enable_categorical=False,\n","                                          eval_metric=None, feature_types=None,\n","                                          gamma=None, grow_policy=None,\n","                                          importance_type=None,\n","                                          interaction_constraints=None,\n","                                          learning_rate=...\n","                                          monotone_constraints=None,\n","                                          multi_strategy=None,\n","                                          n_estimators=None, n_jobs=None,\n","                                          num_parallel_tree=None,\n","                                          random_state=None, ...),\n","                   n_iter=50, n_jobs=-1,\n","                   param_distributions={'learning_rate': [0.01, 0.1, 0.2],\n","                                        'max_depth': [3, 6, 9],\n","                                        'n_estimators': [100, 500, 1000],\n","                                        'objective': ['reg:squarederror'],\n","                                        'random_state': [101],\n","                                        'tree_method': ['gpu_hist']},\n","                   random_state=101, verbose=1)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=3,\n","                   estimator=XGBRegressor(base_score=None, booster=None,\n","                                          callbacks=None,\n","                                          colsample_bylevel=None,\n","                                          colsample_bynode=None,\n","                                          colsample_bytree=None, device=None,\n","                                          early_stopping_rounds=None,\n","                                          enable_categorical=False,\n","                                          eval_metric=None, feature_types=None,\n","                                          gamma=None, grow_policy=None,\n","                                          importance_type=None,\n","                                          interaction_constraints=None,\n","                                          learning_rate=...\n","                                          monotone_constraints=None,\n","                                          multi_strategy=None,\n","                                          n_estimators=None, n_jobs=None,\n","                                          num_parallel_tree=None,\n","                                          random_state=None, ...),\n","                   n_iter=50, n_jobs=-1,\n","                   param_distributions={&#x27;learning_rate&#x27;: [0.01, 0.1, 0.2],\n","                                        &#x27;max_depth&#x27;: [3, 6, 9],\n","                                        &#x27;n_estimators&#x27;: [100, 500, 1000],\n","                                        &#x27;objective&#x27;: [&#x27;reg:squarederror&#x27;],\n","                                        &#x27;random_state&#x27;: [101],\n","                                        &#x27;tree_method&#x27;: [&#x27;gpu_hist&#x27;]},\n","                   random_state=101, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=3,\n","                   estimator=XGBRegressor(base_score=None, booster=None,\n","                                          callbacks=None,\n","                                          colsample_bylevel=None,\n","                                          colsample_bynode=None,\n","                                          colsample_bytree=None, device=None,\n","                                          early_stopping_rounds=None,\n","                                          enable_categorical=False,\n","                                          eval_metric=None, feature_types=None,\n","                                          gamma=None, grow_policy=None,\n","                                          importance_type=None,\n","                                          interaction_constraints=None,\n","                                          learning_rate=...\n","                                          monotone_constraints=None,\n","                                          multi_strategy=None,\n","                                          n_estimators=None, n_jobs=None,\n","                                          num_parallel_tree=None,\n","                                          random_state=None, ...),\n","                   n_iter=50, n_jobs=-1,\n","                   param_distributions={&#x27;learning_rate&#x27;: [0.01, 0.1, 0.2],\n","                                        &#x27;max_depth&#x27;: [3, 6, 9],\n","                                        &#x27;n_estimators&#x27;: [100, 500, 1000],\n","                                        &#x27;objective&#x27;: [&#x27;reg:squarederror&#x27;],\n","                                        &#x27;random_state&#x27;: [101],\n","                                        &#x27;tree_method&#x27;: [&#x27;gpu_hist&#x27;]},\n","                   random_state=101, verbose=1)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n","             colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=None, device=None, early_stopping_rounds=None,\n","             enable_categorical=False, eval_metric=None, feature_types=None,\n","             gamma=None, grow_policy=None, importance_type=None,\n","             interaction_constraints=None, learning_rate=None, max_bin=None,\n","             max_cat_threshold=None, max_cat_to_onehot=None,\n","             max_delta_step=None, max_depth=None, max_leaves=None,\n","             min_child_weight=None, missing=nan, monotone_constraints=None,\n","             multi_strategy=None, n_estimators=None, n_jobs=None,\n","             num_parallel_tree=None, random_state=None, ...)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n","             colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=None, device=None, early_stopping_rounds=None,\n","             enable_categorical=False, eval_metric=None, feature_types=None,\n","             gamma=None, grow_policy=None, importance_type=None,\n","             interaction_constraints=None, learning_rate=None, max_bin=None,\n","             max_cat_threshold=None, max_cat_to_onehot=None,\n","             max_delta_step=None, max_depth=None, max_leaves=None,\n","             min_child_weight=None, missing=nan, monotone_constraints=None,\n","             multi_strategy=None, n_estimators=None, n_jobs=None,\n","             num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["\n","\n","# 최적의 파라미터와 모델 출력\n","print(\"Best parameters found: \", random_search.best_params_)\n","best_model = random_search.best_estimator_\n","\n","# 5. 모델 성능 평가\n","y_pred_val = best_model.predict(x_val)\n","y_pred_test = best_model.predict(x_test)\n","\n","print(\"Validation Set Performance:\")\n","print(f\"RMSE: {numpy.sqrt(mean_squared_error(y_val, y_pred_val))}\")\n","\n","print(\"Test Set Performance:\")\n","print(f\"RMSE: {numpy.sqrt(mean_squared_error(y_test, y_pred_test))}\")\n","\n","# 6. 새로운 데이터 포인트에 대한 예측\n","random.seed(101)\n","random_ind = random.randint(0, len(temp_data) - 1)\n","new_customer = temp_data.drop(target_column, axis=1).iloc[random_ind].values.reshape(1, -1)\n","\n","predicted_return = best_model.predict(new_customer).item()\n","\n","print(f\"Model Prediction for new customer: {predicted_return}\")\n","print(f\"Actual return rate: {temp_data.iloc[random_ind][target_column]}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p35UHVwhPJ_-","executionInfo":{"status":"ok","timestamp":1724601454120,"user_tz":-540,"elapsed":333,"user":{"displayName":"박준희","userId":"16915361753984348702"}},"outputId":"a831c0aa-17dd-4584-f8bf-1b5754de0246"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Best parameters found:  {'tree_method': 'gpu_hist', 'random_state': 101, 'objective': 'reg:squarederror', 'n_estimators': 1000, 'max_depth': 6, 'learning_rate': 0.1}\n","Validation Set Performance:\n","RMSE: 0.011664404533803463\n","Test Set Performance:\n","RMSE: 0.010372010059654713\n","Model Prediction for new customer: 1.0006046295166016\n","Actual return rate: 1.0\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"5jHDojlgGdld"},"execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.9"},"colab":{"provenance":[],"gpuType":"T4"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}